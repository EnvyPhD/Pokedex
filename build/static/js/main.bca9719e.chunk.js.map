{"version":3,"sources":["components/Card/Card.jsx","components/CardList/CardList.jsx","components/SearchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","person","id","name","email","CardList","friends","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredFriends","filter","friend","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mUAIaA,G,MAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,SACX,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAAMI,OAAOC,GAAxC,4BACrB,gCAAML,EAAMI,OAAOE,KAAnB,KACA,+BAAKN,EAAMI,OAAOG,UCJbC,G,MAAW,SAAAR,GAAK,OACzB,yBAAKC,UAAU,YACVD,EAAMS,QAAQC,KAAI,SAAAN,GAAM,OACrB,kBAAC,EAAD,CAAMO,IAAKP,EAAOC,GAAID,OAAQA,UCM3BQ,G,MATG,SAAC,GAAD,IAAIC,EAAJ,EAAIA,YAAaC,EAAjB,EAAiBA,aAAjB,OACd,2BACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8CHG,G,wDA9Cf,aAAe,IAAD,8BACZ,gBAeFH,aAAe,SAAAI,GACb,EAAKC,SACA,CAAEC,YAAaF,EAAEG,OAAOC,SAf7B,EAAKC,MAAQ,CACXd,QAAS,GACTW,YAAa,IALH,E,gEAWO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,QAASmB,S,+BAShC,IAAD,EAC0BC,KAAKN,MAA9Bd,EADD,EACCA,QAASW,EADV,EACUA,YACXU,EAAkBrB,EAAQsB,QAAO,SAAAC,GAAM,OAC3CA,EAAO1B,KAAK2B,cAAcC,SAASd,EAAYa,kBAGjD,OACE,yBAAKhC,UAAU,OACb,2CAGA,kBAAC,EAAD,CACEY,YAAY,iBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUL,QAASqB,S,GAvCTK,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bca9719e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nimport './Card.css'\r\nexport const Card = props => (\r\n    <div className=\"Cards\">\r\n        <img alt=\"friend\" src ={`https://robohash.org/${props.person.id}?set=set2&size=180x180`}></img>\r\n        <h2> {props.person.name} </h2>\r\n        <p> {props.person.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport { Card } from '../Card/Card'\r\nimport './CardList.css'\r\n\r\nexport const CardList = props => (\r\n    <div className='CardList'>\r\n        {props.friends.map(person => (\r\n            <Card key={person.id} person={person} />\r\n\r\n        ))}\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport './SearchBox.css'\r\n\r\nconst SearchBox = ( { placeholder, handleChange }) => (\r\n    <input\r\n        className='search' \r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n    />\r\n)\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\nimport { CardList } from './components/CardList/CardList'\n\nimport SearchBox from './components/SearchBox/SearchBox.jsx'\nimport './App.css';\n\n\n\nclass App extends Component {\nconstructor() {\n  super();\n\n  this.state = {\n    friends: [],\n    searchfield: ''\n  }\n\n  // this.handleChange = this.handleChange.bind(this);\n}\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ friends: users}))\n}\nhandleChange = e => {\n  this.setState(\n      ({ searchfield: e.target.value })\n    )\n}\n\n\n  render() {\n    const { friends, searchfield } = this.state;\n    const filteredFriends = friends.filter(friend =>\n      friend.name.toLowerCase().includes(searchfield.toLowerCase())\n    )\n\n    return ( \n      <div className=\"App\">\n        <h1>\n          Friends Dex\n        </h1>\n        <SearchBox \n          placeholder=\"Search Friends\"\n          handleChange={this.handleChange}\n        />\n        <CardList friends={filteredFriends} />\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}